{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"genshin.py","text":"<p>Modern API wrapper for HoYoLAB &amp; Miyoushe(\u7c73\u6e38\u793e) API built on asyncio and pydantic.</p> <p>Documentation: https://seriaati.github.io/genshin.py</p> <p>API Reference: https://seriaati.github.io/genshin.py/pdoc/genshin</p> <p>Source Code: https://github.com/seriaati/genshin.py</p> <p>The primary focus of genshin.py is convenience. The entire project is fully type-hinted and abstracts a large amount of the api to be easier to use.</p> <p>Key features:</p> <ul> <li>All data is in the form of Pydantic Models which means full autocompletion and linter support.</li> <li>Requests are significantly faster thanks to proper usage of asyncio.</li> <li>Chinese and English names returned by the API are renamed to simpler English fields.</li> <li>Supports the majority of the popular endpoints.</li> <li>Cleanly integrates with frameworks like FastAPI out of the box.</li> </ul> <p>Note: This library is a successor to genshinstats - an unofficial wrapper for the Genshin Impact api.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.9+</li> <li>aiohttp 3.0+</li> <li>Pydantic 2.0+</li> <li>tenacity 9.0+</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the stable version:</p> <pre><code>pip install genshin\n</code></pre> <p>You can also install the latest development version from GitHub:</p> <pre><code>pip install git+https://github.com/seriaati/genshin.py\n</code></pre> <p>A new release is made every 2 weeks.</p>"},{"location":"#example","title":"Example","text":"<p>A very simple example of how genshin.py would be used:</p> <pre><code>import asyncio\nimport genshin\n\nasync def main():\n    cookies = {\"ltuid\": 119480035, \"ltoken\": \"cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT\"}\n    client = genshin.Client(cookies, uid=710785423)\n\n    user = await client.get_genshin_user()\n    print(f\"User has a total of {user.stats.characters} characters\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"authentication/","title":"Authentication","text":""},{"location":"authentication/#cookies","title":"Cookies","text":"<p>Cookies are the default form of authentication over the majority of Mihoyo APIs. These are used in web events and hoyolab utilities such as the Battle Chronicle. The cookies used in these APIs are the same as the ones you use to log in to your hoyolab account and make payments. This means it's highly recommended to use your own cookies only for local testing and to create alt accounts for actual API requests.</p> <p>For authentication, you will need to send two cookies: <code>ltuid</code> and <code>ltoken</code>. <code>ltuid</code> is your hoyolab UID and <code>ltoken</code> is a unique token used for the actual authentication.</p>"},{"location":"authentication/#setting-cookies","title":"Setting cookies","text":"<p>There are several ways to set cookies but <code>set_cookies</code> is preferred.</p> <pre><code># set as an __init__ parameter\nclient = genshin.Client({\"ltuid\": ..., \"ltoken\": ...})\n\n# set dynamically\nclient = genshin.Client()\nclient.set_cookies({\"ltuid\": ..., \"ltoken\": ...}) # mapping\nclient.set_cookies(ltuid=..., ltoken=...) # kwargs\nclient.set_cookies(\"ltuid=...; ltoken=...\") # cookie header\n</code></pre>"},{"location":"authentication/#how-can-i-get-my-cookies","title":"How can I get my cookies?","text":""},{"location":"authentication/#from-the-browser","title":"From the browser","text":"<ol> <li>Go to hoyolab.com.</li> <li>Login to your account.</li> <li>Press <code>F12</code> to open Inspect Mode (ie. Developer Tools).</li> <li>Go to <code>Application</code>, <code>Cookies</code>, <code>https://www.hoyolab.com</code>.</li> <li>Copy <code>ltuid</code> and <code>ltoken</code>.</li> </ol>"},{"location":"authentication/#using-username-and-password","title":"Using username and password","text":"<ol> <li>Run <code>python -m genshin login -a &lt;account&gt; -p &lt;password&gt;</code>.</li> <li>Press the <code>Login</code> button and solve a captcha.</li> <li>Copy cookies.</li> </ol>"},{"location":"authentication/#setting-cookies-automatically","title":"Setting cookies automatically","text":"<p>For testing, you may want to use your own personal cookies. As long as you are logged into your account on one of your browsers, you can get these dynamically with <code>genshin.utility.get_browser_cookies()</code>.</p>"},{"location":"authentication/#installation","title":"Installation","text":"<pre><code>pip install genshin[cookies,rsa]\n</code></pre>"},{"location":"authentication/#example","title":"Example","text":"<pre><code># set browser cookies\nclient = genshin.Client()\nclient.set_browser_cookies()\n\n\n# login with username and password\nclient = genshin.Client()\ncookies = client.login_with_password(\"me@gmail.com\", \"EheTeNandayo\")\nprint(cookies)\n</code></pre> <p>In case of conflicts/errors, you may specify the browser you want to use.</p> <pre><code>cookies = genshin.utility.get_browser_cookies(\"chrome\")\n</code></pre>"},{"location":"authentication/#details","title":"Details","text":"<p>For some endpoints like <code>redeem_code</code>, you might need to set <code>account_id</code> and <code>cookie_token</code> cookies instead. You can get them by going to genshin.hoyoverse.com.</p> <p>If you know you will be redeeming gifts and also use other endpoints, you should \"complete\" your cookies before saving them in for example database with <code>cookies = await genshin.complete_cookies(...)</code></p>"},{"location":"authentication/#authkey","title":"Authkey","text":"<p>Authkeys are an alternative authentication used mostly for paginators like <code>client.wish_history()</code> and <code>client.transaction_log()</code>. They last only 24 hours, and it's impossible to do any write operations with them. That means authkeys, unlike cookies, are absolutely safe to share.</p> <p>These authkeys should always be a base64 encoded string and around 1024 characters long.</p>"},{"location":"authentication/#setting-authkeys","title":"Setting authkeys","text":"<p>Similar to cookies, you may set authkeys through multiple ways.</p> <pre><code># set as an __init__ parameter\nclient = genshin.Client(authkey=\"...\")\n\n# set dynamically\nclient.authkey = \"...\"\n</code></pre> <p>Since authkeys are safe to share, all functions which use authkeys also accept them as a parameter.</p> <pre><code>client = genshin.Client()\nasync for wish in client.wish_history(authkey=\"...\"):\n    pass\n</code></pre>"},{"location":"authentication/#how-can-i-get-my-authkey","title":"How can I get my authkey?","text":""},{"location":"authentication/#pc","title":"PC","text":"<ul> <li>Genshin Impact: https://stardb.gg/en/wish-import</li> <li>Honkai Star Rail: https://stardb.gg/en/warp-import</li> <li>Zenless Zone Zero: https://stardb.gg/en/signal-import</li> </ul> <p>Future games can also be found on the same website.</p>"},{"location":"authentication/#android","title":"Android","text":"<p>Difficult, check https://gist.github.com/jogerj/2372d0e5bee51e001a6d8956240d527b for more information. If it's no longer valid, utilize Google and search \"android genshin impact wish import\" or similar.</p>"},{"location":"authentication/#ios","title":"iOS","text":"<p>No clue, maybe use a sniffer.</p>"},{"location":"authentication/#setting-authkeys-automatically","title":"Setting authkeys automatically","text":"<p>If you open a wish history or a wish details page in genshin, then the authkey will show up in your logfiles. It's possible to dynamically get the authkey using <code>genshin.utility.get_authkey()</code>.</p> <pre><code># get the authkey from a logfile\nclient = genshin.Client()\nclient.authkey = genshin.utility.get_authkey()\n\n# implicitly set the authkey\nclient = genshin.Client()\nclient.set_authkey()\n</code></pre>"},{"location":"battle_chronicle/","title":"Battle Chronicle","text":"<p>The main feature of genshin.py is the Battle Chronicle. It contains various features such as statistics, character equipment, spiral abyss runs, exploration progress, etc.</p> <p>To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information.</p>"},{"location":"battle_chronicle/#quick-example","title":"Quick example","text":"<pre><code># get general user info:\nuser = await client.get_genshin_user(710785423)\nuser = await client.get_honkai_user(710785423)\n\n# get abyss:\ndata = await client.get_spiral_abyss(710785423, previous=True)\ndata = await client.get_honkai_abyss(710785423)\n</code></pre>"},{"location":"battle_chronicle/#optimizations","title":"Optimizations","text":"<p>Some methods implicitly make multiple requests at once:</p> <ul> <li>instead of <code>get_genshin_user</code> you can use <code>get_partial_genshin_user</code> and <code>get_characters</code></li> <li>instead of <code>get_honkai_abyss</code> you can use <code>get_old_abyss</code> or <code>get_superstring_abyss</code></li> </ul> <pre><code>user = await client.get_partial_genshin_user(710785423)\nprint(user.stats.days_active)\n</code></pre> <p>On the other hand, if you want to request as much information as possible, you should use <code>get_full_genshin_user</code>/<code>get_full_honkai_user</code> which adds spiral abyss runs and activities to the user.</p> <pre><code>user = await client.get_full_genshin_user(710785423)\nprint(user.abyss.previous.total_stars)\n</code></pre>"},{"location":"caching/","title":"Caching","text":"<p>Genshin.py caches data for you using a custom <code>genshin.BaseCache</code> object in <code>client.cache</code>.</p>"},{"location":"caching/#quick-example","title":"Quick example","text":"<pre><code># create a cache\nclient = genshin.Client()\nclient.set_cache(maxsize=256, ttl=3600)\n\n# set a custom cache\nclient.cache = genshin.StaticCache()\n</code></pre>"},{"location":"caching/#custom-caches","title":"Custom caches","text":"<p>Sometimes a simple mutable mapping won't do, for example with redis caches. In this case you can overwrite the cache with your own.</p> <p>Example:</p> <pre><code>import json\nimport typing\n\nimport genshin\n\nclass JsonCache(genshin.BaseCache):\n    \"\"\"Terrible json cache without any expiration.\"\"\"\n\n    def __init__(self, filename) -&gt; None:\n        self.filename = filename\n\n    async def get(self, key):\n        with open(self.filename, \"r\") as file:\n            data = json.load(file)\n\n        return data.get(str(key))\n\n    async def set(self, key, value) -&gt; None:\n        with open(self.filename, \"r\") as file:\n            data = json.load(file)\n\n        data[str(key)] = value\n\n        with open(self.filename, \"w\") as file:\n            json.dump(data, file)\n\n    async def get_static(self, key):\n        return await self.get(key)\n\n    async def set_static(self, key, value) -&gt; None:\n        await self.set(key, value)\n\n\nclient.cache = JsonCache(\"cache.json\")\n</code></pre>"},{"location":"caching/#redis-cache","title":"Redis cache","text":"<p>A redis cache is provided by default with <code>RedisCache</code>. It is recommended to overwrite this class and modify the serialization methods since normal json may prove to be a bit too slow.</p> <pre><code>import aioredis\n\nclient.cache = genshin.RedisCache(aioredis.Redis(...))\n</code></pre>"},{"location":"calculator/","title":"Enhancment Progress Calculator","text":"<p>A wrapper around the Genshin Impact Enhancment Progress Calculator page. Contains a database of all characters, weapons and artifacts. Also the only way to recieve talents.</p> <p>To request many of the calculator endpoints you must first be logged in. Refer to the authentication section for more information.</p>"},{"location":"calculator/#quick-example","title":"Quick Example","text":"<pre><code># get a list of all characters\ncharacters = await client.get_calculator_characters()\n\n# get a list of all weapons\nweapons = await client.get_calculator_weapons()\n\n# get a list of all artifacts\nartifacts = await client.get_calculator_artifacts()\n\n# search for a specific character/weapon/artifact\ncharacters = await client.get_calculator_characters(query=\"Xi\")\n\n# filter the returned characters/weapons/artifacts\nweapons = await client.get_calculator_weapons(rarities=[5, 4])\n\n# get all talents of a character\ntalents = await client.get_character_talents(10000002)\n\n# get all other artifacts in a set\nartifacts = await client.get_complete_artifact_set(7554)\n</code></pre> <pre><code># get a list of synced characters\n# only returns the characters you have and ensures all level fields are provided\ncharacters = await client.get_calculator_characters(sync=True)\n\n# get the details of a character\n# includes their weapon, artifacts and talents\ndetails = await client.get_character_details(10000002)\n</code></pre>"},{"location":"calculator/#example-of-calculation","title":"Example Of Calculation","text":""},{"location":"calculator/#basic-calculation","title":"Basic Calculation","text":"<p>The calculator uses builders to set data. All methods return <code>self</code> so they're chainable.</p> <pre><code># create a builder object\nbuilder = client.calculator()\n# calculate resoources needed to level up Hu Tao from lvl 1 to lvl 90\nbuilder.set_character(10000046, current=1, target=90)\n# calculate the amount of resources needed for a Staff of Homa from level 20 to level 70\nbuilder.set_weapon(13501, current=20, target=70)\n\n# execute the builder\ncost = await builder.calculate()\nprint(cost)\n</code></pre> <pre><code># you may also chain the builder (recommended)\ncost = await (\n    client.calculator()\n    .set_character(10000046, current=1, target=90)\n    .set_weapon(13501, current=20, target=70)\n)\n</code></pre> <pre><code># calculate the amount needed for a 5* gladiator's nostalgia\nartifact_id = 7554\ncost = await (\n    client.calculator()\n    .add_artifact(artifact_id, current=0, target=20)\n)\n\n# or calculate for a full set\ncost = await (\n    client.calculator()\n    .set_artifact_set(artifact_id, current=0, target=20)\n)\n</code></pre>"},{"location":"calculator/#calculation-based-off-a-character","title":"Calculation based off a character","text":"<p>If we assume we're calculating resources for the currently logged in user we can simply get their weapon and artifact levels directly.</p> <pre><code># Let's use the currently equipped weapon, artifacts and talents\ncost = await (\n    client.calculator()\n    .set_character(10000046, current=1, target=90)\n    .with_current_weapon(target=70)\n    .with_current_artifacts(target=20) # every artifact will be set to lvl 20\n    .with_current_talents(target=7) # every artifact will be set to lvl 7\n)\n</code></pre> <pre><code># you may want to upgrade only specific talent or artifact types\ncost = await (\n    client.calculator()\n    .set_character(10000046, current=80, target=90)\n    # upgrade only the flower and feather\n    .with_current_artifacts(flower=16, feather=20)\n    # upgrade only the burst\n    .with_current_talents(burst=10)\n)\n</code></pre>"},{"location":"cli/","title":"CLI","text":"<p>Genshin.py is not only a library but also a CLI app.</p> <p>Authentication is required for most commands. Cookies can be provided either through <code>--cookies \"ltoken=...; ltuid=...\"</code> or gotten implicitly from the browser.</p>"},{"location":"cli/#installation","title":"Installation","text":"<pre><code>pip install genshin[cli]\n</code></pre>"},{"location":"cli/#usage","title":"Usage","text":""},{"location":"cli/#get-help","title":"Get help","text":"<pre><code>$ python -m genshin --help\nUsage: python -m genshin [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  accounts    Get all of your genshin accounts.\n  banner-ids  Get the banner ids from logs.\n  genshin     Genshin-related commands.\n  honkai      Honkai-related commands.\n  lineups     Show popular genshin lineups.\n  login       Login with a password.\n  pity        Calculate the amount of pulls until pity.\n  wishes      Show a nicely formatted wish history.\n</code></pre>"},{"location":"cli/#run-a-command","title":"Run a command","text":"<pre><code>$ python -m genshin genshin stats 710785423\nUser stats of 710785423\n\nStats:\nAchievements: 436\nDays Active: 464\nCharacters: 33\nWaypoints Unlocked: 169\nDomains Unlocked: 33\nAnemoculi: 66\nGeoculi: 131\nElectroculi: 180\nCommon Chests Opened: 1162\nExquisite Chests Opened: 924\nPrecious Chests Opened: 262\nLuxurious Chests Opened: 106\nRemarkable Chests Opened: 42\n\nExplorations:\nEnkanomiya: explored 67.9% | Offering level 0\nInazuma: explored 98.1% | Reputation level 10\nDragonspine: explored 96.1% | Offering level 12\nLiyue: explored 93.5% | Reputation level 8\nMondstadt: explored 100.0% | Reputation level 8\n\nTeapot:\nlevel 10 | comfort 21220 (Fit for a King)\nUnlocked realms: Floating Abode, Emerald Peak, Cool Isle\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#language","title":"Language","text":"<p>The API supports several languages. You can set what language you want the response to be in by either changing the client language <code>client.lang</code> or passing the language as a method argument.</p> <p>The default language is <code>en-us</code> for overseas and <code>zh-cn</code> for china.</p> <pre><code>client = genshin.Client(lang=\"fr-fr\")\n# or\nclient = genshin.Client()\nuser = await client.get_genshin_user(710785423, lang=\"zh-cn\")\n</code></pre>"},{"location":"configuration/#supported-languages","title":"Supported Languages","text":"Code Language de-de Deutsch en-us English es-es Espa\u00f1ol fr-fr Fran\u00e7ais id-id Indonesia ja-jp \u65e5\u672c\u8a9e ko-kr \ud55c\uad6d\uc5b4 pt-pt Portugu\u00eas ru-ru P\u0443\u0441\u0441\u043a\u0438\u0439 th-th \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22 vi-vn Ti\u1ebfng Vi\u1ec7t zh-cn \u7b80\u4f53\u4e2d\u6587 zh-tw \u7e41\u9ad4\u4e2d\u6587 <p>This mapping is contained in <code>genshin.LANGS</code></p>"},{"location":"configuration/#character-name-language","title":"Character Name Language","text":"<p>Some genshin endpoints fail to return character names. Genshin.py therefore fetches character names from a 3rd party database. By default the enka repository is used but others can be chosen. These functions only need to be ran once on startup.</p> Function Source Notes <code>await genshin.utility.update_characters_genshindata()</code> GenshinData Source of data for all other 3rd party services, has to downloads &gt;20MB per language to be used <code>await genshin.utility.update_characters_enka()</code> EnkaNetwork Repository updates take a while, not reliable right after a genshin update <code>await genshin.utility.update_characters_ambr()</code> Project Amber Uses a 3rd party API that may be subject to change, does a unique request for every language"},{"location":"configuration/#cookie-manager","title":"Cookie Manager","text":"<p>By default <code>Client</code> uses a single cookie. This behavior may be changed by overwriting <code>client.cookie_manager</code> with a subclass of <code>BaseCookieManager</code>.</p> <p>For convenience, if a list of cookies is passed into <code>Client.set_cookies</code> the cookie manager will be automatically set to <code>genshin.RotatingCookieManager</code>.</p>"},{"location":"configuration/#example","title":"Example","text":"<pre><code>import genshin\n\nclass RandomCookieManager(genshin.BaseCookieManager):\n    \"\"\"Cookie Manager that provides random cookies fetched from a database.\"\"\"\n\n    def __init__(self, database):\n        self.database = database\n\n    async def request(self, url, *, method = \"GET\", **kwargs):\n        cookies = await self.database.get_random_cookies()\n        return await self._request(method, url, cookies=cookies, **kwargs)\n</code></pre>"},{"location":"configuration/#international-cookie-manager","title":"International Cookie Manager","text":"<p>When providing data for both cn and os players you might want to share the same client for them and in extension things like the cache. To achieve that you have to set cookies for all regions with <code>InternationalCookieManager</code>.</p> <pre><code>client.cookie_manager = genshin.InternationalCookieManager({\n    genshin.Region.OVESEAS: [{...}, ...],\n    genshin.Region.CHINESE: [{...}, ...],\n})\n</code></pre>"},{"location":"configuration/#cached-uids","title":"Cached UIDs","text":"<p>Some endpoints require a uid despite being private. Genshin.py chooses to fetch and cache these uids instead of forcing users to provide it themselves. This may however cause some obvious performance issues, so it is recommended to set the uids yourself in case you cannot afford to always have an extra delay when creating a new client.</p> <pre><code>client = genshin.Client(game=genshin.Game.GENSHIN)\n\nclient.uid = 710785423\n</code></pre> <p>You can set a UID for a specific game if there's no default game set.</p> <pre><code>client.uids[genshin.Game.GENSHIN] = 710785423\nclient.uids[genshin.Game.HONKAI] = 200476231\n</code></pre>"},{"location":"configuration/#default-region","title":"Default Region","text":"<p>By default all requests will be assumed to be meant to be used with overseas cookies. If you wish to use chinese cookies and chinese endpoints you must change the default region.</p> <pre><code>client = genshin.Client(region=genshin.Region.CHINESE)\n\nclient.region = genshin.Region.CHINESE\n</code></pre>"},{"location":"configuration/#default-game","title":"Default Game","text":"<p>Some endpoints may be the exact same for both genshin and honkai so they require a game to be specified. This can be also done by setting a default game for the client.</p> <pre><code>client = genshin.Client(game=genshin.Game.HONKAI)\n\nclient.default_game = genshin.Game.HONKAI\n</code></pre>"},{"location":"configuration/#proxy","title":"Proxy","text":"<p>Some endpoints may block chinese IPs. Setting up a proxy in this case is recommended.</p> <p>For more information, check out the aiohttp docs.</p> <pre><code>client = genshin.Client(proxy=\"http://127.0.0.1:1080\")\n\nclient.proxy = \"http://127.0.0.1:1080\"\n</code></pre>"},{"location":"credits/","title":"Credits","text":"<p>Thanks to these amazing people genshin.py can be where it is now:</p>"},{"location":"credits/#hoyo-api-contributors","title":"Hoyo API Contributors","text":"<ul> <li>Womsxd: The author of YuanShen User Info - a predecesor to genshinstats</li> <li>Dimbreath: Maintainer of GenshinData, a repository of dumped client data</li> <li>Lightczx: The author of Snap.Genshin, helped me figure out the chinese endpoints</li> <li>lulu666lulu: Figured out how the chinese dynamic secret is generated</li> <li>M-307: Worked on geetest authentication.</li> </ul>"},{"location":"credits/#genshinpy-contributors","title":"Genshin.py Contributors","text":"<ul> <li>Chromosomologist: Helped with honkai endpoints.</li> <li>Pokurt: Helped with capturing the requests coming from the hoyolab android app.</li> <li>GrassSand &amp; molehzy: Provided me with working chinese cookies to test chinese endpoints.</li> <li>Ashlen: me :^)</li> </ul>"},{"location":"credits/#feedback","title":"Feedback","text":"<ul> <li>KT: Developer of \u539f\u795e\u5c0f\u5e6b\u624b.</li> <li>Seria: Developer of \u7533\u9db4.</li> <li>Konard: Developer of Raiden.</li> <li>GauvraM: Translator of \u539f\u795e\u5c0f\u5e6b\u624b.</li> </ul>"},{"location":"daily_rewards/","title":"Daily Rewards","text":"<p>Since hoyo forces users to claim their daily rewards through the website we can abuse that system and claim rewards automatically.</p> <p>To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information.</p> <p>These endpoints require a game to be specified. It's best to configure the default game or use the <code>game=</code> parameter.</p>"},{"location":"daily_rewards/#quick-example","title":"Quick Example","text":"<pre><code># claim daily reward\ntry:\n    reward = await client.claim_daily_reward()\nexcept genshin.AlreadyClaimed:\n    print(\"Daily reward already claimed\")\nelse:\n    print(f\"Claimed {reward.amount}x {reward.name}\")\n</code></pre> <pre><code># get all claimed rewards\nasync for reward in client.claimed_rewards():\n    print(f\"{reward.time} - {reward.amount}x {reward.name}\")\n</code></pre> <pre><code># get info about the current daily reward status\nsigned_in, claimed_rewards = await client.get_reward_info()\nprint(f\"Signed in: {signed_in} | Total claimed rewards: {claimed_rewards}\")\n</code></pre>"},{"location":"daily_rewards/#optimizations","title":"Optimizations","text":"<p>Under the hood, <code>client.claim_daily_reward</code> makes an additional request to get the claimed reward. If you don't want that you may disable the extra request with <code>client.claim_daily_reward(reward=False)</code></p>"},{"location":"debugging/","title":"Debugging","text":""},{"location":"debugging/#interactive-console","title":"Interactive console","text":"<p>Since genshin.py uses asyncio it's fairly hard to debug code in the interactive console. Instead, I highly recommend you to use IPython.</p>"},{"location":"debugging/#requests","title":"Requests","text":"<p>Genshin.py automatically logs all requests using the <code>logging</code> module. You can make these logs show up in the console by setting the <code>debug</code> kwarg to <code>True</code></p> <pre><code>In [1]: client = genshin.Client({...}, debug=True)\n\nIn [2]: user = await client.get_genshin_user(710785423)\nDEBUG:genshin.client.components.base:GET https://webstatic-sea.mihoyo.com/admin/mi18n/bbs_cn/m11241040191111/m11241040191111-en-us.json\nDEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/index?role_id=710785423&amp;server=os_euro\nDEBUG:genshin.client.components.base:POST https://bbs-api-os.hoyolab.com/game_record/genshin/api/character\n{\"role_id\":710785423,\"server\":\"os_euro\"}\nDEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/spiralAbyss?schedule_type=1&amp;role_id=710785423&amp;server=os_euro\nDEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/spiralAbyss?schedule_type=2&amp;role_id=710785423&amp;server=os_euro\nDEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/activities?role_id=710785423&amp;server=os_euro\n</code></pre>"},{"location":"diary/","title":"Traveler's Diary","text":"<p>Contains statistics of earned primogems and mora in the last 3 months.</p> <p>To request any of the diary endpoints you must first be logged in. Refer to the authentication section for more information.</p>"},{"location":"diary/#quick-example","title":"Quick Example","text":"<pre><code># get the diary\ndiary = await client.get_diary()\n\nprint(f\"Primogems earned this month: {diary.data.current_primogems}\")\nfor category in diary.data.categories:\n    print(f\"{category.percentage}% earned from {category.name} ({category.amount} primogems)\")\n</code></pre> <pre><code># get the log of actions which earned primogems\nasync for action in client.diary_log(limit=50):\n    print(f\"{action.action} - {action.amount} primogems\")\n\n# get the diary log for mora\nasync for action in client.diary_log(limit=50, type=genshin.models.DiaryType.MORA):\n    print(f\"{action.action} - {action.amount} mora\")\n</code></pre>"},{"location":"hoyolab/","title":"Hoyolab","text":"<p>Since the api genshin.py is requesting is made primarily for hoyolab some minor utility functions related to it are also supported.</p>"},{"location":"hoyolab/#quick-example","title":"Quick example","text":"<pre><code># get the uid, nickname and level of a user from a hoyolab uid\ncard = await client.get_record_card(8366222)\nprint(card.uid, card.level, card.nickname)\n</code></pre> <pre><code># list of all game accounts of the currently logged-in user\naccounts = await client.get_game_accounts()\nfor account in accounts:\n    print(account.uid, account.level, account.nickname)\n</code></pre> <pre><code># redeem a gift code for the currently logged-in user\nawait client.redeem_code(\"GENSHINGIFT\")\n</code></pre> <pre><code># search users\nusers = await client.search_users(\"sadru\")\nprint(users[0].hoyolab_id)\n\n# get a list of random recommended users (useful for data gathering)\nusers = await client.get_recommended_users()\nprint(users[0].hoyolab_id)\n\n# to actually get any useful data:\ncard = await client.get_record_card(users[0].hoyolab_id)\n</code></pre>"},{"location":"hsr_characters/","title":"Fetching HSR Characters","text":"<p>Normally, you would do:</p> <pre><code>client = genshin.Client(cookies)\nawait client.get_starrail_characters()\n</code></pre> <p>However, when you view another user's profile, the following things are not available:</p> <ul> <li>Character's traces</li> <li>Character's properties/stats</li> <li>Properties of the character's relics and ornaments</li> <li>Memosprite information</li> </ul> <p>In this case, the normal model parsing for detailed character information will fail and raise an error. To avoid this, pass in the <code>simple</code> parameter as <code>True</code>:</p> <pre><code>client = genshin.Client(cookies)\nawait client.get_starrail_characters(uid=other_players_uid, simple=True)\n</code></pre>"},{"location":"hsr_lineup/","title":"HSR Lineup Simulator","text":"<p>This is a HoYoLAB feature that allows players to submit the teams and buffs they used for the endgame challenges (MOC, Pure Fiction, and Apocalyptic Shadow.)</p>"},{"location":"hsr_lineup/#example","title":"Example","text":"<p>The following code example shows all the possible API features the wrapper can currently utilize.</p> <pre><code>import genshin\n\nclient = genshin.Client(lang=\"en-us\") # (1)\nclient = genshin.Client(cookies, uid=809162009, lang=\"zh-cn\") # (2)\n\ngame_modes = await client.get_starrail_lineup_game_modes()\nfor mode in game_modes:\n    print(f\"{mode.name} ({mode.type})\")\n    for floor in mode.floors:\n        print(floor.name)\n\nmoc_stage11 = client.get_starrail_lineup_floor(game_modes, type=\"Chasm\", floor=11) # (3)\nmoc_stage11 = client.get_starrail_lineup_floor(game_modes, type=genshin.models.StarRailGameModeType.MOC, floor=11) # (4)\n\nif moc_stage11 is None:\n    print(\"MOC Stage 11 not found.\")\n    return\nprint(moc_stage11)\n\nschedules = await client.get_starrail_lineup_schedules(\"Chasm\") # (5)\nfor schedule in schedules:\n    print(f\"{schedule.id} - {schedule.name} ({schedule.start_time} ~ {schedule.end_time})\")\n\n# Get lineups for the current season for MOC Stage 11\nschedule = schedules[0]\nnext_page_token = None\nfor _ in range(5):\n    page = await client.get_starrail_lineups( # (6)\n        tag_id=moc_stage11.id,\n        group_id=schedule.id,\n        type=\"Chasm\",\n        next_page_token=next_page_token,\n    )\n    for lineup in page.lineups:\n        print(lineup.title)\n    next_page_token = page.next_page_token\n</code></pre> <ol> <li>The <code>lang</code> parameter matters for the language of lineups returned by the API.</li> <li><code>cookies</code> and <code>uid</code> parameters are optional; if passed in, using the <code>Match</code> order in <code>get_starrail_lineups</code> will return lineups with characters that the user has.</li> <li>Use the helper method to get stage 11 of MOC.</li> <li>You can also use the enum for the game mode type.</li> <li>Get the MOC schedules (sort by most recent first.)</li> <li>10 lineups are fetched per request, use the <code>next_page_token</code> to get the next page of results.</li> </ol>"},{"location":"lineup/","title":"Lineup","text":"<p>Contains recommended character builds and teams for world exploration and domains.</p> <p>To request many of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information.</p>"},{"location":"lineup/#quick-example","title":"Quick Example","text":"<pre><code># get scenarios\nscenarios = await client.get_lineup_scenarios()\n\n# get lineups\nlineups = await client.get_lineups(scenarios.abyss.spire, limit=20)\n\n# get lineup details\nlineup = await client.get_lineup_details(lineups[0].id)\n\n# get further field info of lineups\nlineup = await client.get_lineup_fields()\n</code></pre> <p>Some scenario ids:</p> name id World Exploration 1 Trounce Domains 3 Domain Challenges 9 Boss Battles 24 Spiral Abyss 2 Abyssal Moon Spire 41 <p>Partial data of <code>get_lineup_fields</code></p>"},{"location":"transactions/","title":"Transactions","text":"<p>Contains logs of changes to primogems, crystals, resin, artifacts and weapons.</p> <p>To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information.</p> <p>Transaction kinds:</p> kind item description primogem Primogem rewards from daily commissions and events crystal Crystals gotten from top-up purchases resin Resin lost by claiming boss/domain/leyline rewards artifact Artifacts gained from domains or used as level up material weapon Weapons gained from wishes or used as level up material <p>This enum is contained in <code>genshin.models.TransactionKind</code></p>"},{"location":"transactions/#quick-example","title":"Quick example","text":"<pre><code># iterate over the logs for primogems\nasync for trans in client.transaction_log(\"primogem\"):\n    print(trans)\n\n# set a limit for the iteration\nasync for trans in client.transaction_log(\"primogem\", limit=100):\n    print(trans)\n\n# get and flatten the logs for resin\nlog = await client.transaction_log(\"resin\", limit=100).flatten()\nprint(log[-1].time)\n\n# get the first log for artifacts\ntrans = await client.transaction_log(\"artifact\").first()\nprint(trans.name)\n</code></pre> <pre><code># get multiple transaction kinds combined together\nasync for trans in client.transaction_log([\"artifact\", \"weapon\"]):\n    print(trans)\n\n# get all transaction kinds combined together\nasync for trans in client.transaction_log(limit=20):\n    print(trans)\n</code></pre>"},{"location":"wish_history/","title":"Wish History","text":"<p>Contains the wish history and banner details.</p> <p>To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information.</p>"},{"location":"wish_history/#quick-example","title":"Quick example","text":"<pre><code># simply iterate over the wish history\nasync for wish in client.wish_history():\n    print(f\"{wish.time} - {wish.name} ({wish.rarity}* {wish.type})\")\n\n# set a limit for the iteration\nasync for wish in client.wish_history(limit=100):\n    print(f\"{wish.time} - {wish.name} ({wish.rarity}* {wish.type})\")\n\n# get and flatten the wish history\nhistory = await client.wish_history(limit=100).flatten()\nprint(history[-1].time)\n\n# get the first wish in the paginator (most recent one)\nwish = await client.wish_history().next()\nprint(wish.uid)\n</code></pre>"},{"location":"wish_history/#filtering-data-by-banner","title":"Filtering data by banner","text":"<p>By default <code>client.wish_history()</code> gets data from all banners, you can filter the results by passing in a banner id. You may also call <code>client.get_banner_names()</code> to get the banner names in various languages.</p> Banner ID Novice Wishes 100 Permanent Wish 200 Character Event Wish 301 Weapon Event Wish 302 <p>This enum is contained in <code>genshin.models.BannerType</code></p> <pre><code># get wishes only from the standard permanent banner\nasync for wish in client.wish_history(genshin.models.BannerType.STANDARD, limit=20):\n    print(f\"{wish.time} - {wish.name} ({wish.rarity}* {wish.type})\")\n\n# get wishes from both the character and the weapon banner\nasync for wish in client.wish_history([301, 302], limit=20):\n    print(f\"{wish.time} - {wish.name} ({wish.rarity}* {wish.type})\")\n</code></pre>"},{"location":"wish_history/#banner-details","title":"Banner Details","text":"<p>In the same way you can get data for your wish history you may also get data for the static banner details.</p>"},{"location":"wish_history/#quick-example_1","title":"Quick example","text":"<pre><code># get all the current banners\nbanners = await client.get_banner_details()\nfor banner in banners:\n    print(banner.name)\n</code></pre> <pre><code># get a list of all items that can be gotten from the gacha\nitems = await client.get_gacha_items()\n</code></pre>"},{"location":"wish_history/#optimizations","title":"Optimizations","text":"<p>You may start from any point in the paginator as long as you know the id of the previous item.</p> <pre><code>async for wish in client.wish_history(limit=20):\n    print(wish)\n\nasync for wish in client.wish_history(limit=20, end_id=wish.id):\n    print(wish)\n</code></pre> <p><code>get_banner_details</code> requires ids to get the banner details. These ids change with every new banner so for user experience they are hosted on a remote repository maintained by me. You may get them yourself by opening every single details page in genshin and then running <code>genshin.get_banner_ids()</code></p> <pre><code>banner_ids = genshin.get_banner_ids()\nbanners = await client.get_banner_details(banner_ids)\n</code></pre>"}]}